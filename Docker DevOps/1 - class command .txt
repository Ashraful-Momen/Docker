#how to download a img form https://hub.docker.com/: 
-----------------------------------------------------
>>> docker pull image_name 
>>> docker pull mysql:latest

#show the docker img / container : 
-----------------------------------
>>> docker ps 
>>> docker ps -a | show all imgs

#

#Run img in docker container : 
-------------------------------
>>> docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest

#Access MySQL from Outside the Container (Optional- MySQL env setup):
-----------------------------------------------------
>>>docker run --name mysql-container -p 3306:3306 -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest

Check Active Containers: 
-----------------------------------------------------
>>> docker ps 


#Check the container Logs (details about the container): 
-----------------------------
>>> docker logs <container_name_or_id>
>>> docker logs mysql-container 



#Connect with mysql shell : 
-----------------------------
>>>docker exec -it mysql-container mysql -uroot -p


#Persistent Data Storage: 
-------------------------
By default, data inside Docker containers is not persistent. To ensure MySQL data is stored on your local machine 
(so it's not lost when the container is removed), use Docker volumes.

>>> docker run --name mysql-container -v /your/local/directory:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest


#Stop the MySQL container:
----------------------------
>>> docker stop mysql-container

#Start the MySQL container:
----------------------------
>>> docker start mysql-container

#Remove the MySQL container:
----------------------------
>>> docker rm -f mysql-container

===================================================Main part =================================
#run mysql container: 
---------------------
>>> docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=your_password -p 3306:3306 -d mysql:latest

#run phpmyadmin : (if img is not exist auto download the img): 
---------------------
>>> docker run --name phpmyadmin-container -d --link mysql-container:db -p 8080:80 phpmyadmin/phpmyadmin


#Now you can access the mysql admin => localhost:8080 , form your local machine. 

check the docker systeminfo: 
---------------------
>>> docker inspect mysql-container



#check the docker_ip address :
---------------------
>>> docker inspect -f "{{ .NetworkSettings.Networks.bridge.IPAddress }}" mysql-container

#Find Docker's network range: :  
---------------------
>>> docker network ls

#Inspect the network to get the IP range: 
---------------------
>>> docker network inspect bridge

#list of docker volumes: 
---------------------
>>> docker volume ls

#check mysql container volume : (Mount: volume section): 
---------------------
>>> docker volume inspect mysql-data

check the volume with the name_of_volume: 
---------------------------------------------
>>> docker volume inspect 473d77219e1460781b5c2f752b1a45a81d5b8a566d3854ca1956cd39ec965c13
------->output-------------------------> :
[
    {
        "CreatedAt": "2024-09-07T18:12:58Z",
        "Driver": "local",
        "Labels": {
            "com.docker.volume.anonymous": ""
        },
        "Mountpoint": "/var/lib/docker/volumes/473d77219e1460781b5c2f752b1a45a81d5b8a566d3854ca1956cd39ec965c13/_data",
        "Name": "473d77219e1460781b5c2f752b1a45a81d5b8a566d3854ca1956cd39ec965c13",
        "Options": null,
        "Scope": "local"
    }
]
---------------------
================================================DockerFile===============================================
# Dockerfile for MySQL
FROM mysql:latest

# Set environment variables
ENV MYSQL_ROOT_PASSWORD=your_password
ENV MYSQL_DATABASE=your_db_name
ENV MYSQL_USER=your_user
ENV MYSQL_PASSWORD=your_password

EXPOSE 3306


# Dockerfile for phpMyAdmin
FROM phpmyadmin/phpmyadmin

# Set environment variables
ENV PMA_HOST=mysql
ENV PMA_USER=your_user
ENV PMA_PASSWORD=your_password

EXPOSE 80





========================================connect one my_custom_network to another container ================
>>> docker run --name phpmyadmin-container --link mysql-container:db -d -p 80:80 phpmyadmin/phpmyadmin
>>> docker log phpmyadmin | check the connection status. 

===========================================command for buid img form docker file ===============================
>>> docker build -t custom-mysql -f Dockerfile.mysql .

>>> docker build -t custom-phpmyadmin -f Dockerfile.phpmyadmin .

============================================run mysql container=========================================
>>> docker run -d --name mysql-container -p 3306:3306 custom-mysql

============================================run phpmyadmin container=========================================
>>> docker run -d --name phpmyadmin-container --link mysql-container:db -p 8080:80 custom-phpmyadmin
