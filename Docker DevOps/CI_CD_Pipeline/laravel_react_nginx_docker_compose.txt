# Full Stack: React + Laravel Docker Setup

## Project Structure
```plaintext
project/
├── frontend/                   # React app
│   ├── Dockerfile
│   └── nginx.conf
├── backend/                    # Laravel app
│   ├── docker/
│   │   ├── php/
│   │   │   └── Dockerfile
│   │   └── nginx/
│   │       └── default.conf
├── docker-compose.yml
├── .env
└── backup.sh                   # Backup script
```

## Docker Compose Configuration

### docker-compose.yml
```yaml
version: '3.8'

services:
  # Frontend - React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-app
    restart: unless-stopped
    volumes:
      - frontend_build:/app/build
      - frontend_node_modules:/app/node_modules
    networks:
      - frontend_net
    depends_on:
      - backend

  frontend_nginx:
    image: nginx:alpine
    container_name: frontend-nginx
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - frontend_build:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - frontend_net
    depends_on:
      - frontend

  # Backend - Laravel
  backend:
    build:
      context: ./backend/docker/php
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    volumes:
      - backend_app:/var/www
      - backend_storage:/var/www/storage
      - ./backend:/var/www
    networks:
      - backend_net
      - frontend_net
    depends_on:
      - db

  backend_nginx:
    image: nginx:alpine
    container_name: backend-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - backend_app:/var/www
      - ./backend/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend_net
    depends_on:
      - backend

  # Database
  db:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - backend_net
    command: --default-authentication-plugin=mysql_native_password

  # Redis (Optional)
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend_net

# Networks
networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge

# Volumes
volumes:
  frontend_build:
    driver: local
  frontend_node_modules:
    driver: local
  backend_app:
    driver: local
  backend_storage:
    driver: local
  mysql_data:
    driver: local
  mysql_config:
    driver: local
  redis_data:
    driver: local
```

## Frontend Configuration

### frontend/Dockerfile
```dockerfile
# Build stage
FROM node:16-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Production stage
FROM node:16-alpine
WORKDIR /app
COPY --from=build /app/build ./build
COPY --from=build /app/node_modules ./node_modules
COPY package*.json ./
```

### frontend/nginx.conf
```nginx
server {
    listen 80;
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}
```

## Backend Configuration

### backend/docker/php/Dockerfile
```dockerfile
FROM php:8.2-fpm

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Add user for application
RUN groupadd -g 1000 www
RUN useradd -u 1000 -ms /bin/bash -g www www

# Copy existing application directory contents
COPY . /var/www

# Copy existing application directory permissions
COPY --chown=www:www . /var/www

# Change current user to www
USER www
```

### backend/docker/nginx/default.conf
```nginx
server {
    listen 80;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass backend:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}
```

## Backup Script (backup.sh)
```bash
#!/bin/bash

# Create backup directory
BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p $BACKUP_DIR

# Backup Frontend
echo "Backing up Frontend..."
docker run --rm --volumes-from react-app \
    -v $(pwd)/${BACKUP_DIR}:/backup \
    alpine tar czvf /backup/frontend.tar.gz /app/build

# Backup Backend
echo "Backing up Backend..."
docker run --rm --volumes-from laravel-app \
    -v $(pwd)/${BACKUP_DIR}:/backup \
    alpine tar czvf /backup/backend.tar.gz /var/www

# Backup MySQL
echo "Backing up MySQL..."
docker exec mysql mysqldump -u root -p${DB_ROOT_PASSWORD} --all-databases > ${BACKUP_DIR}/mysql_backup.sql

# Backup Redis (if needed)
echo "Backing up Redis..."
docker exec redis redis-cli SAVE
docker run --rm --volumes-from redis \
    -v $(pwd)/${BACKUP_DIR}:/backup \
    alpine tar czvf /backup/redis.tar.gz /data

echo "Backup completed in ${BACKUP_DIR}"
```

## Usage Commands

### Starting the Stack
```bash
# Build and start all services
docker-compose up -d --build

# Install frontend dependencies
docker-compose exec frontend npm install

# Install backend dependencies
docker-compose exec backend composer install

# Run migrations
docker-compose exec backend php artisan migrate

# Create frontend production build
docker-compose exec frontend npm run build
```

### Backup Commands
```bash
# Make backup script executable
chmod +x backup.sh

# Run backup
./backup.sh
```

### Restore from Backup
```bash
# Restore Frontend
docker run --rm --volumes-from react-app \
    -v $(pwd)/backups/[DATE]/:/backup \
    alpine sh -c "cd / && tar xvf /backup/frontend.tar.gz"

# Restore Backend
docker run --rm --volumes-from laravel-app \
    -v $(pwd)/backups/[DATE]/:/backup \
    alpine sh -c "cd / && tar xvf /backup/backend.tar.gz"

# Restore MySQL
docker exec -i mysql mysql -u root -p${DB_ROOT_PASSWORD} < backups/[DATE]/mysql_backup.sql
```
