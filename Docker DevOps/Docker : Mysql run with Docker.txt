To install and run MySQL using Docker, follow these steps for both **Linux** (Ubuntu) and **Windows** systems. The process is similar since Docker provides a platform-independent way to run containers.

### Steps to Install and Run MySQL in Docker:

#### 1. **Pull the MySQL Docker Image**
   Run the following command to pull the MySQL image from Docker Hub:
   
   ```bash
   docker pull mysql:latest
   ```

   This will download the latest MySQL image. You can specify a version like `mysql:8.0` if needed.

#### 2. **Run MySQL in a Docker Container**
   Once the image is pulled, run the MySQL container. Here’s an example command:
   
   ```bash
   docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest
   ```

   - `--name mysql-container`: This assigns a name to your container (replace it with any name).
   - `-e MYSQL_ROOT_PASSWORD=your_password`: This sets the MySQL root password.
   - `-d mysql:latest`: This runs the container in detached mode (background) using the latest version of MySQL.

#### 3. **Connect to the MySQL Container**
   To connect to the running MySQL server, you can use Docker’s `exec` command to access the container’s MySQL shell:
   
   ```bash
   docker exec -it mysql-container mysql -uroot -p
   ```

   - This will prompt for the `root` password you set with the `MYSQL_ROOT_PASSWORD` environment variable.
   
   Once entered, you'll be inside the MySQL shell where you can execute SQL queries.

#### 4. **Persistent Data Storage**
   By default, data inside Docker containers is not persistent. To ensure MySQL data is stored on your local machine (so it's not lost when the container is removed), use Docker volumes.

   For example, to mount a volume:

   ```bash
   docker run --name mysql-container -v /your/local/directory:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest
   ```

   - Replace `/your/local/directory` with the directory on your system where you want to store the MySQL data persistently.
   - MySQL data inside the container is stored in `/var/lib/mysql`, which is mounted to your local path.

#### 5. **Access MySQL from Outside the Container (Optional)**
   If you want to access MySQL from outside the container (for example, from MySQL Workbench or any other MySQL client), expose the MySQL port (3306) using the `-p` option:

   ```bash
   docker run --name mysql-container -p 3306:3306 -e MYSQL_ROOT_PASSWORD=your_password -d mysql:latest
   ```

   Now, you can connect to MySQL using `localhost:3306` or the IP of your Docker host.

---

#### **Useful Docker Commands for MySQL**:

- **Stop the MySQL container**:
  ```bash
  docker stop mysql-container
  ```

- **Start the MySQL container**:
  ```bash
  docker start mysql-container
  ```

- **Remove the MySQL container**:
  ```bash
  docker rm -f mysql-container
  ```

This approach should work smoothly on both Ubuntu and Windows with Docker installed. Let me know if you face any issues or need further customization!
