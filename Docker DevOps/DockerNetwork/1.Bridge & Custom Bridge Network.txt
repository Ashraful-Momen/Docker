#Default Bridge:
----------------
By default docker provide us the bridge network , which connet with our eth0 host machine . if we build any container and run 
those app run on docker bridge network. 

check the network >>> ifconfig
check docker network >>> docker network ls
check docker network details >>> docker network inspect network_id


#Custom Bridge: 
-----------------
we can create custom network with docker , whcih also run bridge driver . we connect run mutiple app on our custom network . 
custom network create the network isolation . that means another different brige add and connect host maching . 
create custom network >>> docker network create custom_network_name
connect app on custom network >>> docker network connect container_name
disconnect app on custom network >>> docker network disconnect container_name
check the custom_network details >>> docker network inspect network_id


#check bridge link (which container connect with custom_network in which host ): >>> bridge link

#build custom network : >>> docker network create my_network

#create contaier and connect with custom network: 
-----------------------------------------------------
1. docker run -itd --name loki_container --network my_network busybox
2. docker run -itd --name moki_container --network my_network busybox
3. docker run -itd --name web_server_container --network my_network -p 80:80 nginx

#access the shell of those container >  docker exec -it container_name sh
#/:ping loki
#/:ping moki

***by default nginx run on 80 port. after shell access the ping if not working then install the >>>apt install iputils-ping

#access docker container on browser for bridge/custom_brige network: 
-------------------------------------------------------------------
1. http://my_machine_ip(docker0/ehto0/br-0a757bd00405):host_port
>>> http://localhost:80 [if running nginx on 80 port]


#we can connect a container to the Host I mean etho0 bridge directly : 
-------------------------------------------------------------------------
1. docker run -itd --name web_server_container --network host -p 80:80 nginx

#access docker container on browser for host network (no port need): 
-------------------------------------------------------------------
1. http://my_machine_ip(docker0/ehto0/br-0a757bd00405)
2. http://localhost

#access container shell : 
---------------------------
1. docker exec -itd loki_container sh
2. ping moki_container 
4. ping web_server_container

---------------------------------------------- docker network introduction ----------------------------------------------------------
┌──(ashraful㉿kali)-[~]
└─$ ifconfig                                                        
br-0a757bd00405: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255
        inet6 fe80::42:daff:fe62:a6b2  prefixlen 64  scopeid 0x20<link>
        ether 02:42:da:62:a6:b2  txqueuelen 0  (Ethernet)
        RX packets 4622  bytes 268198 (261.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 6678  bytes 9770540 (9.3 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:f1:77:ca:b1  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.3.21  netmask 255.255.255.0  broadcast 192.168.3.255
        inet6 fe80::b62e:99ff:fe7b:7d15  prefixlen 64  scopeid 0x20<link>
        ether b4:2e:99:7b:7d:15  txqueuelen 1000  (Ethernet)
        RX packets 75931  bytes 102125524 (97.3 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 60677  bytes 6250332 (5.9 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 179138  bytes 113249739 (108.0 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 179138  bytes 113249739 (108.0 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

veth20cb45e: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet6 fe80::87b:e9ff:fe21:8306  prefixlen 64  scopeid 0x20<link>
        ether 0a:7b:e9:21:83:06  txqueuelen 0  (Ethernet)
        RX packets 15  bytes 1246 (1.2 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 30  bytes 2336 (2.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

veth472b0dc: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet6 fe80::7ce2:faff:fe75:795d  prefixlen 64  scopeid 0x20<link>
        ether 7e:e2:fa:75:79:5d  txqueuelen 0  (Ethernet)
        RX packets 11  bytes 854 (854.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 26  bytes 1944 (1.8 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
================================================================
#here docker custom network bridge => br-0a757bd00405 
#here docker eth0 bridge => eth0
#here docker localhost bridge => lo
#here docker container bridge => veth20cb45e:


